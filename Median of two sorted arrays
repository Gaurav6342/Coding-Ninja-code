User
Median of two sorted arrays 
Problem Statement
Given two sorted arrays 'a' and 'b' of size 'n' and 'm'
respectively.
Find the median of the two sorted arrays.
Median is defined as the middle value of a sorted list of numbers. In case the length of list is even, median is the average of the two middle elements.
Example:
Input: 'a' = [2, 4, 6] and 'b' = [1, 3, 5]
Output: 3.5
Explanation: The array after merging 'a' and 'b' will be { 1, 2, 3, 4, 5, 6 }. Here two medians are 3 and 4. So the median will be the average of 3 and 4, which is 3.5.

Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1<=^ prime n' <= 10 ^ 6
1<=^ prime m' <= 10 ^ 6
1<=^ prime prime a * [i]' <= 10 ^ 9
1<=^ prime b * [i]' <= 10 ^ 9
Time limit: 1 sec.
Expected Time Complexity:
Can you solve this in O(min(log n, log m)) time complexity?
Sample Input 1:
3 3
2 4 6
1 3 5
Sample Output 1:
3.5
Explanation Of Sample Input 1 :
The array after merging 'a' and 'b' will be { 1, 2, 3, 4, 5, 6 }. 
Here two medians are 3 and 4. So the median will be the average of 3 and 4, which is 3.5.
Sample Input 2:
3 2
2 4 6
1 3  
Sample Output 2:
3
Explanation Of Sample Input 2 :
The array after merging will be {1, 2, 3, 4, 6}
Here, the median will be 3 as it is in the middle.
Sample Input 3:
3 3
1 2 2
2 4 4
Sample Output 3:
2.0


Solution:
Python 3.5 code:
def median(a: int, b: int) -> float:
    merged = sorted(a + b)
    length = len(merged)
    
    if length % 2 != 0:
        return float(merged[length // 2])
    else:
        middle1 = merged[length // 2 - 1]
        middle2 = merged[length // 2]
        return float((middle1 + middle2) / 2.0) 
        
       -------------- or---------------
 def median(a, b):
    # Ensure that array 'a' is always smaller or equal in length to 'b'
    if len(a) > len(b):
        a, b = b, a

    m, n = len(a), len(b)
    low, high = 0, m

    while low <= high:
        partition_a = (low + high) // 2
        partition_b = (m + n + 1) // 2 - partition_a

        # Edge cases to handle elements at extremes (left and right) of partitions
        max_left_a = float('-inf') if partition_a == 0 else a[partition_a - 1]
        min_right_a = float('inf') if partition_a == m else a[partition_a]

        max_left_b = float('-inf') if partition_b == 0 else b[partition_b - 1]
        min_right_b = float('inf') if partition_b == n else b[partition_b]

        # Check if partitions are correctly balanced
        if max_left_a <= min_right_b and max_left_b <= min_right_a:
            # If the combined length of the arrays is odd, return the maximum of left elements
            if (m + n) % 2 != 0:
                return float(max(max_left_a, max_left_b))
            # If the combined length is even, return the average of the maximum of left elements and minimum of right elements
            else:
                return float((max(max_left_a, max_left_b) + min(min_right_a, min_right_b)) / 2.0)
        # Move the partition in the array 'a' towards the correct direction
        elif max_left_a > min_right_b:
            high = partition_a - 1
        # Move the partition in the array 'a' towards the correct direction
        else:
            low = partition_a + 1

    # Arrays are not sorted correctly, return an error value
    raise ValueError("Input arrays are not sorted correctly.")
      

Output:
Test case1:
3 3
2 4 6 
1 3 5 
Output:
3.5
